// Rezi SDK - Browser Bundle
(function(global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = global || self, factory(global.ReziSDK = {}));
}(this, (function(exports) {
  'use strict';

  // Utility functions
  class ReziUtils {
    static generateId(prefix = 'rezi') {
      return `${prefix}-${Math.random().toString(36).substr(2, 9)}`;
    }

    static getThemeClasses(config) {
      const theme = config?.theme || 'light';
      const baseClasses = 'rezi-component';
      const themeClass = `rezi-theme-${theme}`;
      const customClass = config?.className || '';
      return [baseClasses, themeClass, customClass].filter(Boolean).join(' ');
    }

    static createElement(tag, classes, attributes) {
      const element = document.createElement(tag);
      element.className = classes;
      if (attributes) {
        Object.entries(attributes).forEach(([key, value]) => {
          element.setAttribute(key, value);
        });
      }
      return element;
    }

    static debounce(func, delay) {
      let timeoutId;
      return (...args) => {
        clearTimeout(timeoutId);
        timeoutId = setTimeout(() => func.apply(null, args), delay);
      };
    }

    static isValidEmail(email) {
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      return emailRegex.test(email);
    }

    static async copyToClipboard(text) {
      try {
        await navigator.clipboard.writeText(text);
        return true;
      } catch {
        const textArea = document.createElement('textarea');
        textArea.value = text;
        document.body.appendChild(textArea);
        textArea.select();
        const success = document.execCommand('copy');
        document.body.removeChild(textArea);
        return success;
      }
    }
  }

  // Button Component
  class ReziButton {
    constructor(config) {
      this.config = config;
      this.element = this.createElement();
    }

    createElement() {
      const button = ReziUtils.createElement('button', this.getClasses(), {
        type: 'button',
        'data-rezi-component': 'button'
      });

      button.textContent = this.config.text;
      button.disabled = this.config.disabled || false;

      if (this.config.onClick) {
        button.addEventListener('click', this.config.onClick);
      }

      return button;
    }

    getClasses() {
      const baseClasses = ReziUtils.getThemeClasses(this.config);
      const variantClass = `rezi-btn-${this.config.variant || 'primary'}`;
      const sizeClass = `rezi-btn-${this.config.size || 'md'}`;
      return `${baseClasses} rezi-btn ${variantClass} ${sizeClass}`;
    }

    render(container) {
      const target = typeof container === 'string' 
        ? document.querySelector(container)
        : container;
      if (target) {
        target.appendChild(this.element);
      }
    }

    destroy() {
      this.element.remove();
    }
  }

  // Toast Component
  class ReziToast {
    static container = null;

    constructor(config) {
      this.config = config;
      this.element = this.createElement();
      this.ensureContainer();
    }

    static ensureContainer() {
      if (!ReziToast.container) {
        ReziToast.container = ReziUtils.createElement('div', 'rezi-toast-container', {
          'data-rezi-component': 'toast-container'
        });
        document.body.appendChild(ReziToast.container);
      }
      return ReziToast.container;
    }

    ensureContainer() {
      ReziToast.ensureContainer();
    }

    createElement() {
      const toast = ReziUtils.createElement('div', this.getClasses(), {
        'data-rezi-component': 'toast'
      });

      const content = ReziUtils.createElement('div', 'rezi-toast-content');
      content.textContent = this.config.message;

      const closeBtn = ReziUtils.createElement('button', 'rezi-toast-close', {
        type: 'button',
        'aria-label': 'Close toast'
      });
      closeBtn.innerHTML = '&times;';
      closeBtn.addEventListener('click', () => this.hide());

      toast.appendChild(content);
      toast.appendChild(closeBtn);

      return toast;
    }

    getClasses() {
      const baseClasses = ReziUtils.getThemeClasses(this.config);
      const typeClass = `rezi-toast-${this.config.type || 'info'}`;
      const positionClass = `rezi-toast-${this.config.position || 'top-right'}`;
      return `${baseClasses} rezi-toast ${typeClass} ${positionClass}`;
    }

    show() {
      const container = ReziToast.container;
      container.appendChild(this.element);

      setTimeout(() => {
        this.element.classList.add('rezi-toast-show');
      }, 10);

      const duration = this.config.duration || 5000;
      if (duration > 0) {
        this.timeoutId = setTimeout(() => {
          this.hide();
        }, duration);
      }
    }

    hide() {
      if (this.timeoutId) {
        clearTimeout(this.timeoutId);
      }

      this.element.classList.remove('rezi-toast-show');
      
      setTimeout(() => {
        if (this.element.parentNode) {
          this.element.remove();
        }
      }, 300);
    }
  }

  // Convenience functions
  function createButton(config) {
    return new ReziButton(config);
  }

  function showToast(config) {
    const toast = new ReziToast(config);
    toast.show();
    return toast;
  }

  // Auto-load CSS
  function loadCSS() {
    const link = document.createElement('link');
    link.rel = 'stylesheet';
    link.href = 'https://your-cdn.com/rezi-sdk.css'; // Replace with your CDN URL
    document.head.appendChild(link);
  }

  // Initialize
  if (typeof document !== 'undefined') {
    loadCSS();
  }

  // Exports
  exports.ReziButton = ReziButton;
  exports.ReziToast = ReziToast;
  exports.ReziUtils = ReziUtils;
  exports.createButton = createButton;
  exports.showToast = showToast;

  // Make available globally
  if (typeof window !== 'undefined') {
    window.ReziSDK = exports;
  }

})));
